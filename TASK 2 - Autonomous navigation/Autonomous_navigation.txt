#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
from math import atan2, sqrt, pow

class TurtleController:
    def __init__(self):

        # Initialize the ROS node and set up publishers/subscribers

        rospy.init_node('turtle_controller', anonymous=True)
        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
        self.pose_subscriber = rospy.Subscriber('/turtle1/pose', Pose, self.update_pose)
        self.pose = Pose()
        self.rate = rospy.Rate(10)

    def update_pose(self, data):

        # Update the turtle's pose data from the subscriber

        self.pose = data
        self.pose.theta = round(self.pose.theta, 4)

    def euclidean_distance(self, goal_pose):

        # Calculate the Euclidean distance between the current and goal pose
        
        return sqrt(pow((goal_pose.x - self.pose.x), 2) + pow((goal_pose.y - self.pose.y), 2))

    def linear_vel(self, goal_pose, constant=1.5):

        # Calculate linear velocity based on the Euclidean distance and a constant

        return constant * self.euclidean_distance(goal_pose)

    def steering_angle(self, goal_pose):

        # Calculate the steering angle (direction) towards the goal pose
        
        return atan2(goal_pose.y - self.pose.y, goal_pose.x - self.pose.x)

    def angular_vel(self, goal_pose, constant=6):

        # Calculate angular velocity based on the difference in orientation and a constant factor
        
        return constant * (self.steering_angle(goal_pose) - self.pose.theta)

    def move2goal(self, goal_pose):

        # Move the turtle to the specified goal pose

        vel_msg = Twist()

        while self.euclidean_distance(goal_pose) > 0.01:

            # Set linear and angular velocities based on goal pose and publish

            vel_msg.linear.x = self.linear_vel(goal_pose)
            vel_msg.angular.z = self.angular_vel(goal_pose)

            self.velocity_publisher.publish(vel_msg)
            self.rate.sleep()

        # Stop the turtle when the goal is reached

        vel_msg.linear.x = 0
        vel_msg.angular.z = 0
        self.velocity_publisher.publish(vel_msg)

if __name__ == '__main__':
    try:

        # Initialize the TurtleController and get user input for the goal pose

        turtle_controller = TurtleController()

        goal_pose = Pose()
        goal_pose.x = float(input("Enter goal x: "))
        goal_pose.y = float(input("Enter goal y: "))

        # Move the turtle to the specified goal pose

        turtle_controller.move2goal(goal_pose)

    except rospy.ROSInterruptException:
        pass
