#!/usr/bin/env python3

import rospy
from turtlesim.srv import Spawn
from geometry_msgs.msg import Twist

def spawn_turtle(name, x, y, theta):

# Spawns a turtle with the given name and initial pose
    rospy.wait_for_service('/spawn')
    try:
        rospy.ServiceProxy('/spawn', Spawn)(x, y, theta, name)
        rospy.loginfo(f"{name} spawned at position ({x}, {y}, {theta})")
    except rospy.ServiceException as e:
        rospy.logerr(f"Service call failed: {e}")

def move_turtle(lin_vel, ang_vel, duration, turtle_name='/turtle1'):

# Move a turtle with the specified linear and angular velocities for a given duration
# Create a publisher for the turtle's velocity
    vel_pub = rospy.Publisher(turtle_name + '/cmd_vel', Twist, queue_size=10)

    # Set the linear and angular velocities
    twist = Twist()
    twist.linear.x = lin_vel
    twist.angular.z = ang_vel

    # Move the turtle for the specified duration
    rate = rospy.Rate(10)
    start_time = rospy.get_time()
    while (rospy.get_time() - start_time) < duration:
        vel_pub.publish(twist)
        rate.sleep()

    # Stop the turtle after the specified duration
    twist.linear.x = 0
    twist.angular.z = 0
    vel_pub.publish(twist)

if __name__ == '__main__':
    try:

    # Initialize the ROS node
        rospy.init_node('spawn_and_move_turtles', anonymous=True)

         # Defines data for multiple turtles with names and initial positions
        turtles_data = [
            {'name': 'turtle1', 'initial_pose': (1, 1, 0)},
            {'name': 'turtle2', 'initial_pose': (1, 1, 0)},
            {'name': 'turtle3', 'initial_pose': (1, 4, 0)},
            {'name': 'turtle4', 'initial_pose': (1, 7, 0)}
        ]

        # Spawns turtles with different names and initial positions
        for turtle_data in turtles_data:
            spawn_turtle(turtle_data['name'], *turtle_data['initial_pose'])

        # Moves each turtle1 in a specific pattern
        move_turtle(lin_vel=0.0, ang_vel=0.0, duration=0.0, turtle_name='/turtle1')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=0.0, duration=0.0, turtle_name='/turtle1')  # Turn anticlockwise
        
        # Moves each turtle2 in a specific pattern
        move_turtle(lin_vel=5.25, ang_vel=0.0, duration=2.0, turtle_name='/turtle2')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle2')  # Turn clockwise
        move_turtle(lin_vel=1.25, ang_vel=0.0, duration=2.0, turtle_name='/turtle2')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle2')  # Turn clockwise
        move_turtle(lin_vel=4.5, ang_vel=0.0, duration=2.0, turtle_name='/turtle2')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle2')  # Turn clockwise
        move_turtle(lin_vel=1.25, ang_vel=0.0, duration=2.0, turtle_name='/turtle2')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle2')  # Turn clockwise

        # Moves each turtle3 in a specific pattern
        move_turtle(lin_vel=5.25, ang_vel=0.0, duration=2.0, turtle_name='/turtle3')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle3')  # Turn anticlockwise
        move_turtle(lin_vel=1.25, ang_vel=0.0, duration=2.0, turtle_name='/turtle3')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle3')  # Turn clockwise
        move_turtle(lin_vel=4.5, ang_vel=0.0, duration=2.0, turtle_name='/turtle3')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle3')  # Turn anticlockwise
        move_turtle(lin_vel=1.25, ang_vel=0.0, duration=2.0, turtle_name='/turtle3')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle3')  # Turn clockwise

        # Moves each turtle4 in a specific pattern
        move_turtle(lin_vel=5.2, ang_vel=0.0, duration=2.0, turtle_name='/turtle4')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle4')  # Turn anticlockwise
        move_turtle(lin_vel=1.25, ang_vel=0.0, duration=2.0, turtle_name='/turtle4')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle4')  # Turn clockwise
        move_turtle(lin_vel=4.5, ang_vel=0.0, duration=2.0, turtle_name='/turtle4')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle4')  # Turn anticlockwise
        move_turtle(lin_vel=1.25, ang_vel=0.0, duration=2.0, turtle_name='/turtle4')  # Move forward
        move_turtle(lin_vel=0.0, ang_vel=1.564805, duration=1.0, turtle_name='/turtle4')  # Turn clockwise
        
        

    except rospy.ROSInterruptException:
        pass
