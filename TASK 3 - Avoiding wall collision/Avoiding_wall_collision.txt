#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose

class TurtleAvoidWalls:
    def __init__(self):

    # Initialize the ROS node, publishers, subscribers, and set initial parameters
        rospy.init_node('turtle_avoid_walls', anonymous=True)

        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
        self.pose_subscriber = rospy.Subscriber('/turtle1/pose', Pose, self.pose_callback)

        self.rate = rospy.Rate(10)  # 10 Hz
        self.linear_speed = 1.0
        self.angular_speed = 1.5
        self.safe_distance = 1.5
        self.current_pose = Pose()

    def pose_callback(self, data):
        self.current_pose = data

    def move_turtle(self):

        while not rospy.is_shutdown():
            # Move forward with obstacle avoidance
            twist = Twist()
            twist.linear.x = self.linear_speed
            twist.angular.z = self.calculate_angular_velocity()
            self.velocity_publisher.publish(twist)
            self.rate.sleep()

    def calculate_angular_velocity(self):

        # wall avoidance that turns away from walls
        if self.current_pose.x < self.safe_distance or self.current_pose.x > 10.5 - self.safe_distance \
                or self.current_pose.y < self.safe_distance or self.current_pose.y > 10.5 - self.safe_distance:
            return -self.angular_speed  # Turn away from walls
        else:
            return 0.0  
            # Move forward if no walls are nearby

if __name__ == '__main__':
    try:
        # Initialize TurtleAvoidWalls and start moving the turtle with obstacle avoidance
        turtle_avoid_walls = TurtleAvoidWalls()
        turtle_avoid_walls.move_turtle()
    except rospy.ROSInterruptException:
        pass
